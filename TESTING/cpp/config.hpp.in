/*
 * Copyright (c) 2020 Christoph Conrads (https://christoph-conrads.name)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of the copyright holders nor the
 *    names of its contributors may be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef LAPACK_TESTS_CONFIG_HPP
#define LAPACK_TESTS_CONFIG_HPP

#include <boost/mpl/list.hpp>
#include <boost/mpl/push_front.hpp>
#include <complex>

#cmakedefine01 BUILD_SINGLE
#cmakedefine01 BUILD_DOUBLE
#cmakedefine01 BUILD_COMPLEX
#cmakedefine01 BUILD_COMPLEX16


namespace lapack {
namespace impl
{

template<bool cond, class X, class List>
struct push_if
{
	using type = List;
};

template<class X, class List>
struct push_if<true, X, List>
{
	using type = typename boost::mpl::push_front<List, X>::type;
};

}

constexpr bool BUILD_SINGLE_P = BUILD_SINGLE;
constexpr bool BUILD_DOUBLE_P = BUILD_DOUBLE;
constexpr bool BUILD_COMPLEX_P = BUILD_COMPLEX;
constexpr bool BUILD_COMPLEX16_P = BUILD_COMPLEX16;

using supported_types =
	impl::push_if<BUILD_SINGLE_P, float,
	impl::push_if<BUILD_DOUBLE_P, double,
	impl::push_if<BUILD_COMPLEX_P, std::complex<float>,
	impl::push_if<BUILD_COMPLEX16_P, std::complex<double>, boost::mpl::list<>
	>::type>::type>::type>::type
;

}

#undef BUILD_SINGLE
#undef BUILD_DOUBLE
#undef BUILD_COMPLEX
#undef BUILD_COMPLEX16

#endif
